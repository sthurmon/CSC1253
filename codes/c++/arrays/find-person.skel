#include <iostream>                 /// iostream is required for input/output.
#include <fstream>                  /// fstream is needed for file I/O.
#include <cstdlib>                  /// cstdlib is required for exit().
#include <cmath>                    /// cmath is needed for abs().
using namespace std;

#define N 69                        /// There are 69 entries in the file.
#define M 10                        /// There are 10 attributes.

int argmin(int x[]) {               //** Define Algorithm argmin(int x[]) as follows:
    int i;             
    int ___ = _[_], ______=_;       //*  I.  Let min <- x[0] and argmin <- 0.
    for (_=_; _<_; _++)             //*  II. For i=0 to N in steps of 1:
        if (___ > _[_]) {           //*      A. If min > x[i]:
            ___ = _[_];             //*         i.  Let    min <- x[i].
            ______ = _;             //*         ii. Let argmin <-   i.
        }
    return ______;                  //*  III. Return argmin.
}                                   

int manhattan(int x[], int y[]) {   //** Define Algorithm Manhattan(int x[], int y[] as follows:
    int i, s = 0;                   //*  I.   Let s <- 0.
    for (_=0; _<_; _++)             //*  II.  For i=0 to M in steps of 1:
        _ += ___(_[_]-_[_]);        //*       A.  Let s <- s + |x[i]-y[i]|.
    return _;                       //*  III. Return s.
}                                   //-


int main() {

    int d[N];                       /// An array holds the Manhattan distances.
    int p[N][M];                    /// A matrix p holds the ith student's jth personality trait in p_ij.
    int i, j;                       /// Counters are declared for the ith student and jth personality trait.
    string initial;                 /// Each student has an initial which must be read from the file.

    ifstream infile;                       /// The input file stream object is declared.
    infile.open("../../data/neo-complete.dat"); /// The data file is opened.

                                        //** The pseudocode for reading into the matrix is as follows:
    if (infile) {                       //*  I.  If the file can be opened:
            for (_=_; _<_; _++) {       //*      A.  For each ith classmate:
                infile >> _______;      //*          i.  Read the first initial.
                for (_=_; _<__; _++)    //*          ii. For each jth attribute:
                    infile >> p[_][_];  //*              a.  Read the jth attribute into element p_ij.
            }
    } else {                            //*  II. Otherwise, give an error message and quit.
        cout << "File could not be opened!";
        exit(1);
    }                                   

    //  TODO: Replace this vector with your own
    int  me[M] = {4,1,1,3,1,4,4,5,3,5};  /// The array me represents my vector.
    int you[M];                          /// The array you represents another student's vector.

                                    //** The pseudocode for obtaining all Manhattan distances d:
    for (_=_; _<_; _++) {           //*  I.  For each ith classmate:
        for (_=_; _<_; _++)         //*      A.  For each jth attribute:
            ___[_] = _[_][_];       //*          i.  Copy the attribute into a vector for the ith student.
        _[_] = manhattan(__, ___);  //*      B.  Load Manhattan distance between me and ith student into d_i.
    }                               //-

    int similar = ______(_);          /// The index of the most similar person is argmin(d).
    for (_=0; _<_; _++)               /// For each attribute j,
      cout << _[_______][_] << " ";   /// print out the most similar person's attribute.
    cout << endl;                     

    return 0;
}
